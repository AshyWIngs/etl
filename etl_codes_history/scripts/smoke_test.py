# scripts/smoke_test.py
# -*- coding: utf-8 -*-
"""
Smoke-test –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏.

–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
1) ensure() + –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.
2) advisory lock: –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫.
3) planned ‚Üí running ‚Üí ok: watermark –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–µ–∑–∞.
4) planned ‚Üí running ‚Üí error: watermark –Ω–µ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è.
5) sanitize_stale(): –ø–æ–º–µ—á–∞–µ—Ç ¬´–≤–∏—Å—è—á–∏–µ¬ª planned (TTL) –∏ running (—Å—Ç–∞—Ä—ã–π heartbeat/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).

–ó–∞–ø—É—Å–∫:
  python -m scripts.smoke_test \
    --process-name codes_history_smoketest \
    --step-min 5 \
    --keep   # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞

–û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à Settings() / .env, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Ç–µ–º –∂–µ –ë–î.
"""

import logging
import argparse
from datetime import datetime, timedelta, timezone

from .logging_setup import setup_logging
from .config import Settings, parse_iso_utc
from .db.pg_client import PGClient
from .journal import ProcessJournal

log = logging.getLogger("smoke_test")


def _utc_now():
    return datetime.now(timezone.utc)


def assert_true(cond: bool, msg: str):
    if not cond:
        raise AssertionError(msg)


def test_ensure_and_migrations(pg: PGClient, journal: ProcessJournal):
    log.info("1) ensure() + apply_sql_migrations()")
    journal.ensure()
    journal.apply_sql_migrations()
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    idx_name = f"{journal._tail_identifier(journal.table)}_active_one_uq_idx"
    pg.execute(
        "SELECT 1 FROM pg_indexes WHERE schemaname = split_part(%s,'.',1) AND indexname = %s",
        (journal.table, idx_name),
    )
    assert_true(pg.fetchone() is not None, f"–ù–µ –Ω–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {idx_name}")
    log.info("OK: —Å—Ö–µ–º–∞ –∏ –∏–Ω–¥–µ–∫—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ")


def test_exclusive_lock(cfg: Settings):
    log.info("2) advisory lock (—ç–∫—Å–∫–ª—é–∑–∏–≤)")
    pg1 = PGClient(cfg.PG_DSN)
    pg2 = PGClient(cfg.PG_DSN)
    j1 = ProcessJournal(pg1, cfg.JOURNAL_TABLE, cfg.PROCESS_NAME + "_smoke_lock")
    j2 = ProcessJournal(pg2, cfg.JOURNAL_TABLE, cfg.PROCESS_NAME + "_smoke_lock")
    j1.ensure()

    got1 = j1.try_acquire_exclusive_lock()
    got2 = j2.try_acquire_exclusive_lock()
    try:
        assert_true(got1 is True, "–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –≤–∑—è—Ç—å lock")
        assert_true(got2 is False, "–í—Ç–æ—Ä–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤–∑—è–ª–∞ —Ç–æ—Ç –∂–µ lock")
        log.info("OK: –≤—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç–∞–Ω—Å –ª–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª")
    finally:
        j1.release_exclusive_lock()
        pg1.close()
        pg2.close()


def test_ok_flow(journal: ProcessJournal):
    log.info("3) planned‚Üírunning‚Üíok + –ø–æ–≤—ã—à–µ–Ω–∏–µ watermark")
    now = _utc_now()
    s = now - timedelta(hours=2)
    e = now - timedelta(hours=1)

    wm_before = journal.get_watermark()
    journal.mark_planned(s, e)
    journal.mark_running(s, e)

    journal.heartbeat(progress={"phase": "reading", "rows_read": 0})
    journal.mark_done(s, e, rows_read=0, rows_written=0, message="smoke ok")

    wm_after = journal.get_watermark()
    assert_true(wm_after is not None, "Watermark –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    assert_true(wm_after >= e, f"Watermark –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è –¥–æ {e.isoformat()}, —Ç–µ–ø–µ—Ä—å: {wm_after}")
    if wm_before:
        assert_true(wm_after >= wm_before, "Watermark —É–º–µ–Ω—å—à–∏–ª—Å—è ‚Äî —Ç–∞–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ")
    log.info("OK: watermark –ø–æ–¥–Ω—è–ª—Å—è –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–µ–∑–∞")


def test_error_flow(journal: ProcessJournal):
    log.info("4) planned‚Üírunning‚Üíerror –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è watermark")
    now = _utc_now()
    s = now - timedelta(hours=1)
    e = now - timedelta(minutes=30)

    wm_before = journal.get_watermark()
    journal.mark_planned(s, e)
    journal.mark_running(s, e)
    journal.mark_error(s, e, message="smoke error")
    wm_after = journal.get_watermark()
    # –¥–æ–ø—É—Å–∫–∞–µ–º None==None; –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –≤—ã—Ä–æ—Å
    assert_true(wm_before == wm_after, "Watermark –Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ ERROR")
    log.info("OK: watermark –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –æ—à–∏–±–æ—á–Ω–æ–º —Å—Ä–µ–∑–µ")


def test_sanitize_stale(pg: PGClient, journal: ProcessJournal):
    log.info("5) sanitize_stale(): planned TTL –∏ running heartbeat timeout")
    now = _utc_now()

    # –°–ª—É—á–∞–π planned: —É—Å—Ç–∞—Ä–µ–≤—à–∏–π planned ‚Üí skipped
    s1 = now - timedelta(minutes=30)
    e1 = now - timedelta(minutes=25)
    rid_planned = journal.mark_planned(s1, e1)
    # –°—Ç–∞—Ä–∏–º –∑–∞–ø–∏—Å—å: ts_start << now()
    pg.execute(
        f"UPDATE {journal.table} SET ts_start = now() - interval '10 minutes' WHERE id = %s",
        (rid_planned,),
    )

    # –°–ª—É—á–∞–π running: —É–¥–∞–ª–∏–º heartbeat_ts –∏ —É—Å—Ç–∞—Ä–∏–º ts_start ‚Üí –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å error
    s2 = now - timedelta(minutes=24)
    e2 = now - timedelta(minutes=20)
    journal.mark_planned(s2, e2)
    rid_running = journal.mark_running(s2, e2)
    # –£–¥–∞–ª–∏–º heartbeat_ts –∏ –∑–∞—Å—Ç–∞—Ä–∏–º ts_start
    pg.execute(
        f"""
        UPDATE {journal.table}
           SET ts_start = now() - interval '10 minutes',
               details  = COALESCE(details, '{{}}'::jsonb) - 'heartbeat_ts'
         WHERE id = %s
        """,
        (rid_running,),
    )

    # –°–∞–Ω–∏—Ç–∞—Ä–∏–º –∂—ë—Å—Ç–∫–æ: TTL 1 –º–∏–Ω—É—Ç–∞, heartbeat timeout 1 –º–∏–Ω—É—Ç–∞
    journal.sanitize_stale(planned_ttl_minutes=1, running_heartbeat_timeout_minutes=1, running_hard_ttl_hours=None)

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å—ã
    pg.execute(
        f"SELECT status FROM {journal.table} WHERE id = %s",
        (rid_planned,),
    )
    st1 = pg.fetchone()[0]
    pg.execute(
        f"SELECT status, details->>'reason' FROM {journal.table} WHERE id = %s",
        (rid_running,),
    )
    r2 = pg.fetchone()
    st2, reason2 = r2[0], r2[1]

    assert_true(st1 == "skipped", f"–û–∂–∏–¥–∞–ª–∏ skipped –¥–ª—è planned TTL, –ø–æ–ª—É—á–∏–ª–∏: {st1}")
    assert_true(st2 == "error" and reason2 in ("heartbeat_timeout", "hard_ttl"),
                f"–û–∂–∏–¥–∞–ª–∏ error (heartbeat_timeout/hard_ttl) –¥–ª—è running, –ø–æ–ª—É—á–∏–ª–∏: {st2}/{reason2}")

    log.info("OK: sanitize_stale() –ø–æ–º–µ—Ç–∏–ª –∑–∞–≤–∏—Å—à–∏–µ planned/running –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def cleanup(pg: PGClient, journal: ProcessJournal):
    log.info("cleanup: —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏")
    pg.execute(f"DELETE FROM {journal.table} WHERE process_name = %s", (journal.process_name,))
    pg.execute(f"DELETE FROM {journal.state_table} WHERE process_name = %s", (journal.process_name,))


def main():
    parser = argparse.ArgumentParser(description="Smoke-test –∂—É—Ä–Ω–∞–ª–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏")
    parser.add_argument("--process-name", default=None, help="–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é <PROCESS_NAME>_smoketest)")
    parser.add_argument("--keep", action="store_true", help="–ù–µ —á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
    parser.add_argument("--log-level", default="INFO")
    args = parser.parse_args()

    setup_logging(args.log_level)
    cfg = Settings()

    test_process_name = args.process_name or (cfg.PROCESS_NAME + "_smoketest")
    pg = PGClient(cfg.PG_DSN)
    journal = ProcessJournal(pg, cfg.JOURNAL_TABLE, test_process_name)

    try:
        test_ensure_and_migrations(pg, journal)
        test_exclusive_lock(cfg)
        test_ok_flow(journal)
        test_error_flow(journal)
        test_sanitize_stale(pg, journal)
        log.info("üéâ SMOKE-TEST: –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û.")
    finally:
        if args.keep:
            log.warning("–ó–∞–ø–∏—Å–∏ SMOKE-TEST —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Ñ–ª–∞–≥ --keep).")
        else:
            try:
                cleanup(pg, journal)
                log.info("cleanup: OK")
            except Exception as e:
                log.exception("cleanup: –æ—à–∏–±–∫–∞: %s", e)
        pg.close()


if __name__ == "__main__":
    main()